(function(c){var b=c.stm=c.stm||{};var d={Success:0,Failed:1};function a(){this.reqID=0;this.state=d.Success;this.data=null}b.Response=a;b.Response.State=d})(this);(function(b){var a=b.stm=b.stm||{};a.ContentProtocol={onOpen:function(c){c()},onClose:function(){},parse:function(c){return new a.Response()},build:function(c,e,d){return new ArrayBuffer(2)},buildFailedMessage:function(c,d){return new ArrayBuffer(2)},extend:function(d){if(d.__proto__){d.__proto__=this}else{for(var c in this){if(this.hasOwnProperty(c)&&!d.hasOwnProperty(c)){d[c]=this[c]}}if(this.hasOwnProperty("toString")&&!d.hasOwnProperty("toString")){d.toString=this.toString}}d.$parent=this;return d}}})(this);(function(b){var a=b.stm=b.stm||{};a.DefaultContentProtocol={parse:function(e){var d=new a.Response();var c=new DataView(e);d.reqID=c.getUint32(0);d.state=(c.getUint8(4)==0)?a.Response.State.Success:a.Response.State.Failed;d.data=e.slice(5);return d},build:function(c,h,f){c=c||"";if(typeof c!=="string"&&!(c instanceof ArrayBuffer)){return"body type is error, must be string or ArrayBuffer"}h=h||{};if(typeof h!=="object"){return"headers must be a object type, for example {uri: '/location'}"}var g=0;for(var e in h){if(!h.hasOwnProperty(e)){continue}if(typeof e!=="string"||typeof h[e]!=="string"){return"headers' key or property must be string"}if(e.length>255){return"length of headers' key <"+e+"> more than 255"}if(h[e].length>255){return"length of headers' object <"+h[e]+"> more than 255"}if(e.length==0||h[e].length==0){continue}g+=1+1+e.length+h[e].length}c=new StringView(c);var d=new ArrayBuffer(4+c.rawData.byteLength+1+g);(new DataView(d)).setUint32(0,f);var i=4;for(e in h){if(!h.hasOwnProperty(e)){continue}(new DataView(d)).setUint8(i,e.length);i++;(new Uint8Array(d)).set((new StringView(e)).rawData,i);i+=e.length;(new DataView(d)).setUint8(i,h[e].length);i++;(new Uint8Array(d)).set((new StringView(h[e])).rawData,i);i+=h[e].length}(new DataView(d)).setUint8(i,0);i++;(new Uint8Array(d)).set(c.rawData,i);return d},buildFailedMessage:function(d,e){d=new StringView(d);var c=new ArrayBuffer(4+d.rawData.byteLength+1);(new DataView(c)).setUint32(0,e);(new DataView(c)).setUint8(4,a.Response.State.Failed);(new Uint8Array(c)).set(d.rawData,5);return c}}})(this);(function(e){if(typeof StringView!=="function"){console.error("can not find StringView. this error maybe cause 'stm.Client is not a constructor'. you can find in https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView or https://github.com/madmurphy/stringview.js");return}function a(m,r,q,n,p,o){this.body=m||"";this.headers=q||{};this.onSuccess=r||function(s){};this.onFailed=n||function(s){};this.onComplete=p||function(){};this.reqID=o}var h=200;var d=h-1;var c=1;function b(){function m(n){n.net_=null;n.netArgs_="";n.requests_=Object.create(null);n.protocol_=k.ContentProtocol.extend(k.DefaultContentProtocol);n.blockRequest_=null;n.isBlock_=false;n.reqID_=h;n.onConnectionSuc_=function(){};n.onConnectionFaild_=function(o){};n.normalOnMessage_=function(o){};n.connectTimeout_=30}m(this);this.onPush=function(n){}}function f(m){return new l(m)}var j=b.prototype;j.setConnectArgs=function(m,o,n){this.netArgs_=m;this.onConnectionFaild_=n||function(p){};this.onConnectionSuc_=o||function(){}};j.setConfig=function(m){this.connectTimeout_=m};j.setBlockRequestOnConnected=function(m,q,p,n,o){this.blockRequest_=new a(m,q,p,n,o,d)};j.addRequest=function(m,r,q,n,p){if(this.netArgs_==null){if(typeof p==="function"){p()}if(typeof n==="function"){n("net args not set")}return}var o=f(this).getReqID();this.requests_[o.toString()]=new a(m,r,q,n,p,o);if(this.isBlock_){return}if(this.net_!=null&&this.net_.readyState==WebSocket.OPEN){f(this).sendRequest(this.requests_[o.toString()]);return}if(this.net_!=null&&this.net_.readyState==WebSocket.CONNECTING){return}f(this).connect()};function i(m){setTimeout(m,0)}function l(m){this.client_=m}var g=l.prototype;g.getReqID=function(){this.client_.reqID_++;if(this.client_.reqID_<h){this.client_.reqID_=h}return this.client_.reqID_};g.sendRequest=function(n){var m=this.client_;var o=m.protocol_.build(n.body,n.headers,n.reqID);if(typeof o=="string"){i(function(){var p=m.protocol_.buildFailedMessage(o,n.reqID);m.net_.onmessage({data:p})});return}m.net_.send(o)};g.connect=function(){var m=this.client_;this.client_.normalOnMessage_=function(r){var p=m.protocol_.parse(r);if(p.reqID==c){m.onPush(p.data);return}var q=m.requests_[p.reqID.toString()];if(q==null){console.error("not find request for reqID<"+p.reqID+">");return}q.onComplete();if(p.state!=k.Response.State.Success){if(p.data===null||p.data===undefined){q.onFailed("may be server error, but server has closed the error log")}else{q.onFailed((new StringView(p.data)).toString())}}else{q.onSuccess(p.data)}delete m.requests_[p.reqID.toString()]};this.client_.net_=new WebSocket(this.client_.netArgs_);m.net_.haserror=false;m.net_.binaryType="arraybuffer";m.net_.onmessage=function(p){m.normalOnMessage_(p.data)};var o=setTimeout(function(){m.net_.timeout()},m.connectTimeout_*1000);var n=this;m.net_.onopen=function(p){if(o!=null){clearTimeout(o);o=null}if(m.blockRequest_!=null){n.sendBlockRequest()}else{n.sendAllRequest()}m.protocol_.onOpen(m.onConnectionSuc_)};m.net_.onclose=function(p){if(o!=null){clearTimeout(o);o=null}m.net_.close(1000);m.protocol_.onClose();if(!m.net_.haserror){m.net_.haserror=false;n.netError("connection closed by peer or connection error")}};m.net_.onerror=function(p){m.net_.haserror=true;if(o!=null){clearTimeout(o);o=null}n.netError("connect error---"+JSON.stringify(p))};m.net_.timeout=function(p){o=null;this.onopen=function(q){};this.onclose=function(q){};this.onerror=function(q){};this.onmessage=function(q){};m.net_=null;n.netError("connect timeout")}};g.sendAllRequest=function(){var m=this.client_;for(var n in m.requests_){this.sendRequest(m.requests_[n])}};g.sendBlockRequest=function(){var n=this.client_;n.isBlock_=true;var o=this;var m=function(r){var p=n.protocol_.parse(r);var s=true;var t=true;var q=n.blockRequest_;q.onComplete();if(p.state!=k.Response.State.Success){t=false;if(p.data===null||p.data===undefined){q.onFailed("may be server error, but server has closed the error log")}else{q.onFailed((new StringView(p.data)).toString())}}else{s=!(q.onSuccess(p.data)===false)}s=s&&t;if(!t){o.errorAllRequest("block request error---"+(new StringView(p.data)).toString())}if(s){o.sendAllRequest()}else{if(t){o.errorAllRequest("block request stop this request continuing")}}n.isBlock_=false;n.net_.onmessage=function(u){n.normalOnMessage_(u.data)}};n.net_.onmessage=function(p){m(p.data)};this.sendRequest(n.blockRequest_)};g.errorAllRequest=function(n){var m=this.client_;for(var o in m.requests_){(function(p){i(function(){m.normalOnMessage_(m.protocol_.buildFailedMessage(n,p))})})(Number(o))}};g.netError=function(n){var m=this.client_;if(m.isBlock_){i(function(){var o=m.protocol_.buildFailedMessage(n,d);m.net_.onmessage({data:o})})}this.errorAllRequest(n);m.onConnectionFaild_(n)};var k=e.stm=e.stm||{};k.Client=b})(this);